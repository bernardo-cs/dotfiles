"mxw/vim-jsx""""  NeoBundle Config
if has('vim_starting')
  set nocompatible
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
"call neobundle#rc(expand('~/.vim/bundle/'))
call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'
" My bundles here:
NeoBundle 'scrooloose/syntastic'
NeoBundle 'ecomba/vim-ruby-refactoring'
NeoBundle 'justinmk/vim-sneak'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'kien/rainbow_parentheses.vim'
NeoBundle 'rust-lang/rust.vim'
NeoBundle 'guns/vim-clojure-static'                " better clojure integration
NeoBundle 'godlygeek/tabular'
NeoBundle 'justinj/vim-react-snippets'     " React Snippets
NeoBundle 'pangloss/vim-javascript'        "Better js highlight
NeoBundle 'mxw/vim-jsx'                    "Better jsx highlight
NeoBundle 'honza/vim-snippets'             "Some default snippets
NeoBundle 'SirVer/ultisnips'
NeoBundle 'tpope/vim-rails'                "Better Rails integration
NeoBundle 'slim-template/vim-slim'
NeoBundle 'christoomey/vim-tmux-navigator'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'nelstrom/vim-visual-star-search' "Use # and * in visual mode
NeoBundle 'vim-ruby/vim-ruby'              "Latest version of ruby tools
NeoBundle 'mileszs/ack.vim'
NeoBundle 'rking/ag.vim'
NeoBundle 'sjl/vitality.vim'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'vim-scripts/Auto-Pairs'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'Valloric/YouCompleteMe'
NeoBundle 'jonathanfilip/vim-lucius'
NeoBundle 'bling/vim-airline'
NeoBundle 'vim-airline/vim-airline-themes'
NeoBundle 'edkolev/tmuxline.vim'
NeoBundle 'Olical/vim-enmasse'
NeoBundle 'Keithbsmiley/rspec.vim'          " rspec syntax highlight and file identification
NeoBundle 'airblade/vim-gitgutter'          " git changes on vim gutter
NeoBundle 'tpope/vim-classpath'                " better find and gf for jvm projects
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'tpope/vim-obsession'             "session management
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'tpope/vim-dispatch'              " make async on another pane
NeoBundle 'tpope/vim-fugitive'              " git wrapper
NeoBundle 'tpope/vim-haystack'             " better fuzzy search
NeoBundle 'tpope/vim-salve'                " leiningen support for vim
NeoBundle 'tpope/vim-fireplace'                " clojure repl for vim
NeoBundle 'mustache/vim-mustache-handlebars'
NeoBundle 'leafgarland/typescript-vim'      "typescript support 
NeoBundle 'janko-m/vim-test'      
NeoBundle 'editorconfig/editorconfig-vim'
NeoBundle 'neomake/neomake' "async linting
NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }

"
" Check for uninstalled bundles
call neobundle#end()
filetype plugin indent on
NeoBundleCheck

set nocompatible                  " Must come first because it changes other options.

syntax on                         " Turn on syntax highlighting.
set spell spelllang=en_us         " Turns on spellcheker
syntax spell toplevel             " check syntaxe correctly on latex files
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

set nofoldenable
set fdm=expr                      "Fold comments
set fde=getline(v:lnum)=~'^\\s#'?1:getline(prevnonblank(v:lnum))=~'^\\s#'?1:getline(nextnonblank(v:lnum))=~'^\\s*#'?1:0

set virtualedit=all             " because blocks rock

set cpoptions+=$                  " Visual help for change word cw

set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.

set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

let g:airline_powerline_fonts = 1 " automatically populate the g:airline_symbols
" Solarized stuff
let g:solarized_termcolors=16
set background=light
colorscheme solarized

" set auto read buffers
set autoread

" WARNING MIGHT BE CAUSING SOME SLOWNESS
" Diferentiate between INSERT and NORMAL mode with insert line
"set cursorline
"autocmd InsertEnter * set cursorline!
"autocmd InsertLeave * set cursorline

" Mappings custom
" tab for auto complete
"imap <Tab> <C-P>
" press jk in insert mode to enter command mode
imap jk <c-c>
" Autocomplete will pull from keywords in the current file, other buffers (closed or still
" open), and from the current tags file
set complete=.,b,u,]
" Closest to zsh completion
set wildmode=longest,list:longest

" progaming language number of tabs
autocmd Filetype r setlocal ts=2 sts=2 sw=2
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2

" Automatic fold settings for specific files. Uncomment to use.
autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2

" reduce esc  key lag
set timeoutlen=1000 ttimeoutlen=0

" Speed up screen drawing
" Syntax coloring lines that are too long just slows down the world
"set synmaxcol=128
set ttyfast " u got a fast terminal
set ttyscroll=3
set lazyredraw " to avoid scrolling problems

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
set wildignore+=vendor/rails/*,bin/*,node_modules/*,script/* " Rails

" Enable Hardtime
let g:hardtime_default_on = 1

" Auto remove trailing whitespace
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
autocmd FileType c,coffee,cpp,java,php,ruby,python autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
autocmd FileType ruby,coffee,slim autocmd BufWritePre <buffer> :retab

" VIM-Latex specific
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
"set wildignore+=*.log,*.aux,*.dvi,*.aut,*.aux,*.bbl,*.blg,*.dvi,*.fff,*.log,*.out,*.pdf,*.ps,*.toc,*.ttt,*.m*,*.lo*,*.eps,*.sty,*.backupn

" set default register to the clipboard
set clipboard=unnamed

" stop swap files
set nobackup
set nowritebackup
set noswapfile

" Remove tab from youcompleteme
let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_key_invoke_completion = '<Down>'

" Let ultisnippets split my screen
let g:UltiSnipsEditSplit="vertical"

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

"""""""""""""""""""""""""""""""""""""""""""
""""""     Personal shortcuts       """""""
"""""""""""""""""""""""""""""""""""""""""""

""" Search and Replace
"""
" Replace current selected text, on current buffer
nnoremap <leader>sr :%s///g<left><left>

"""
""" Buffer Manipulation
"""
" Opens buffer list
nnoremap <leader>b :buffers<CR>:buffer<Space>
" Save all buffers and change tabs for spaces
nnoremap <leader>ss :wa<CR>
"nnoremap <leader>ss :retab<CR> :wa<CR>
" Save all buffers and quit
nnoremap <leader>sq :xa<CR>
" Close pane
nnoremap <leader>qq :q<CR>


" rubocop auto correct buffer
nnoremap <leader>wb :let lineNumber = line('.') <cr> :%!rubocop -a -s  % <cr> :0,5d <cr> :execute lineNumber <cr>

"""
""" Text Manipulation
"""
" Use enter, and shift enter to add a new line in exec mode
nnoremap <S-Enter> O<Esc>j

"""
""" Git
"""
nnoremap <leader>gnb :!git checkcout -b
nnoremap <leader>gcm :!git checkout master<CR>
nnoremap <leader>gc :!git commit -am ''<left>
nnoremap <leader>gs :!git status<CR>
nnoremap <leader>ga :!git add .<CR>
nnoremap <leader>gp :!git push<CR>
nnoremap <leader>gm :!git merge

"""
""" Misc.
"""
" Edit vimrc
nnoremap <leader>ve :e ~/.vimrc<CR>
" Reload vim
nnoremap <leader>vr :source ~/.vimrc<CR>


"""
""" Spelling
"""
" Correct first spelling error to the left
" and go back where the cursor was
map <leader>za mz[s1z=`z
" same thing to the right
map <leader>zs mz]s1z=`z
" Go to next spelling mistake
map <leader>zc [s
" Go to previous spelling mistake
map <leader>zv ]s
" Toggle spelling
map <leader>zt :set spell!<cr>
" Apply first correction
map <leader>zz 1z=

"" Running specs

"let g:rspec_command = 'compiler rspec | set makeprg=spring | Make rspec {spec}'
"let g:rspec_command = '!bin/rails test {spec}'

let test#strategy = "dispatch"
nnoremap <Leader>sf  :w <bar> :TestFile<CR>
nnoremap <Leader>s.  :w <bar> :TestNearest<CR>
nnoremap <Leader>sd  :w <bar> :TestLast<CR>
nnoremap <Leader>sa  :w <bar> :TestSuite<CR>
nnoremap <Leader>sv  :w <bar> :TestVisit<CR>

" Minitest
"nnoremap <Leader>sf :w <bar> :Dispatch bin/rails test %<CR>
"nnoremap <Leader>s. :w <bar> :Dispatch bin/rails test %:<C-r>=line('.')<cr><cr>

" Get me some pry
nnoremap <leader>bp Obinding.pry<esc>:w<cr>

"" vim.rails key maps
nnoremap <Leader>rm :Rmodel
nnoremap <Leader>rv :Rview
nnoremap <Leader>rc :Rcontroller
nnoremap <Leader>rh :Rhelper
nnoremap <Leader>rmi :Rmigration
nnoremap <Leader>rr :R<cr>
vnoremap <Leader>re :Rextract

"" Tabularize micode
nnoremap <Leader>' :Tab<cr>
vnoremap <Leader>' :Tab<cr>
nnoremap <Leader>'{ :Tab /^[^{]*\zsl{<cr>
vnoremap <Leader>'{ :Tab /^[^{]*\zsl{<cr>
nnoremap <Leader>'r :Tab /^[^=>]*\zs=><cr>
vnoremap <Leader>'r :Tab /^[^=>]*\zs=><cr>
nnoremap <Leader>'= :Tab /^[^=]*\zs=<cr>
vnoremap <Leader>'= :Tab /^[^=]*\zs=<cr>
nnoremap <Leader>'' :Tab /^[^']*\zs'/l1l0<cr>
vnoremap <Leader>'' :Tab /^[^']*\zs'/l1l0<cr>


set re=1 "set regex engine to older one, might speedup vim

""" Select Functions and Mappings
" Run a given vim command on the results of fuzzy selecting from a given shell
" command. See usage below.
"function! SelectaCommand(choice_command, selecta_args, vim_command)
"try
"let selection = system(a:choice_command . " | selecta " . a:selecta_args)
"catch /Vim:Interrupt/
"" Swallow the ^C so that the redraw below happens; otherwise there will be
"" leftovers from selecta on the screen
"redraw!
"return
"endtry
"redraw!
"exec a:vim_command . " " . selection
"endfunction

"" Find all files in all non-dot directories starting in the working directory.
"" Fuzzy select one of those. Open the selected file with :e.
"nnoremap <c-p> :call SelectaCommand("find * -type f", "", ":e")<cr>

"" Find files under the cursor
"function! SelectaIdentifier()
"" Yank the word under the cursor into the z register
"normal "zyiw
"" Fuzzy match files in the current directory, starting with the word under
"" the cursor
"call SelectaCommand("find * -type f", "-s " . @z, ":e")
"endfunction
"nnoremap <leader>p :call SelectaIdentifier()<cr>

" Refactoring Shortcuts
:nnoremap <leader>rap  :RAddParameter<cr>
:nnoremap <leader>rcpc :RConvertPostConditional<cr>
:nnoremap <leader>rel  :RExtractLet<cr>
:vnoremap <leader>rec  :RExtractConstant<cr>
:vnoremap <leader>relv :RExtractLocalVariable<cr>
:nnoremap <leader>rit  :RInlineTemp<cr>
:vnoremap <leader>rrlv :RRenameLocalVariable<cr>
:vnoremap <leader>rriv :RRenameInstanceVariable<cr>
:vnoremap <leader>rem  :RExtractMethod<cr>

"Insert mode shortcuts
inoremap II <Esc>I
inoremap AA <Esc>A
inoremap OO <Esc>O
inoremap CC <Esc>C
inoremap CW <Esc>bcw
inoremap Ee <Esc>ea
inoremap EE <Esc>Ea

""" File type specific
" Slim
" show tabs:
au  FileType slim set list

" syntastic config
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_typescript_checkers=['tslint','tsc']

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_ruby_checkers = ['mri']

" Angular maps
nnoremap <leader>as :e app/assets/javascripts/angular/services/
nnoremap <leader>ac :e app/assets/javascripts/angular/controllers/
nnoremap <leader>aa :e app/assets/javascripts/angular/

" Airline config
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_section_b = ''
let g:airline_section_y = ''

" Tab maps
nmap <silent> tt :tabnew<CR>
nmap <silent> [g :tabprevious<CR>
nmap <silent> ]g :tabnext<CR>
nmap <silent> [G :tabrewind<CR>
nmap <silent> ]G :tablast<CR>

" assync ctags
let g:easytags_async = 1

" project specific vimrc
if filereadable(glob(".vimrc.local"))
    source .vimrc.local
endif

" \ 'dir':  '\v[\/]\.(git|hg|svn)$',
" ctrl p
let g:ctrlp_working_path_mode = 'r'
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\.git\|node_modules\|bin\|\.hg\|\.svn\|build\|log\|resources\|spec/vcr\|coverage\|doc\|tmp\|public/assets\|vendor\|Android',
      \ 'file': '\v\.(exe|so|dll)$',
      \ }
let g:ctrlp_cmd = 'CtrlPMixed'
nnoremap <space> :CtrlPTag<cr>

" ctrlp current word
nmap ± :CtrlP<CR><C-\>w

" abbreviations
iab bp binding.pry
iab db debugger

" fast word search with ag
noremap § :Ag! -Q <C-r>=expand('<cword>')<CR>

" YCM use pyenv python
let g:ycm_path_to_python_interpreter = '/Users/bersimoes/.pyenv/shims/python'

" rails commands
noremap <leader>rc :Dispatch bin/rails c <CR>
noremap <leader>rdb :Dispatch bin/rails dbconsole <CR>

" editor config play nicely with fugitive 
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" create parent folder when saving a new file if they dont exist
function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" ----------------------------------------------------------------------------
" ?ii / ?ai | indent-object
" ?io       | strictly-indent-object
" ----------------------------------------------------------------------------
function! s:indent_len(str)
  return type(a:str) == 1 ? len(matchstr(a:str, '^\s*')) : 0
endfunction

function! s:indent_object(op, skip_blank, b, e, bd, ed)
  let i = min([s:indent_len(getline(a:b)), s:indent_len(getline(a:e))])
  let x = line('$')
  let d = [a:b, a:e]

  if i == 0 && empty(getline(a:b)) && empty(getline(a:e))
    let [b, e] = [a:b, a:e]
    while b > 0 && e <= line('$')
      let b -= 1
      let e += 1
      let i = min(filter(map([b, e], 's:indent_len(getline(v:val))'), 'v:val != 0'))
      if i > 0
        break
      endif
    endwhile
  endif

  for triple in [[0, 'd[o] > 1', -1], [1, 'd[o] < x', +1]]
    let [o, ev, df] = triple

    while eval(ev)
      let line = getline(d[o] + df)
      let idt = s:indent_len(line)

      if eval('idt '.a:op.' i') && (a:skip_blank || !empty(line)) || (a:skip_blank && empty(line))
        let d[o] += df
      else | break | end
    endwhile
  endfor
  execute printf('normal! %dGV%dG', max([1, d[0] + a:bd]), min([x, d[1] + a:ed]))
endfunction
xnoremap <silent> ii :<c-u>call <SID>indent_object('>=', 1, line("'<"), line("'>"), 0, 0)<cr>
onoremap <silent> ii :<c-u>call <SID>indent_object('>=', 1, line('.'), line('.'), 0, 0)<cr>
xnoremap <silent> ai :<c-u>call <SID>indent_object('>=', 1, line("'<"), line("'>"), -1, 1)<cr>
onoremap <silent> ai :<c-u>call <SID>indent_object('>=', 1, line('.'), line('.'), -1, 1)<cr>
xnoremap <silent> io :<c-u>call <SID>indent_object('==', 0, line("'<"), line("'>"), 0, 0)<cr>
onoremap <silent> io :<c-u>call <SID>indent_object('==', 0, line('.'), line('.'), 0, 0)<cr>

" Adds :Notes command
command Notes e ~/Desktop/notes.md

" run neomake on save
autocmd! BufWritePost * Neomake

" Reformat json file
nnoremap <leader>fj :%! json_reformat <cr>
