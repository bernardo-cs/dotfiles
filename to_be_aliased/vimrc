call plug#begin('~/.vim/plugged')

" My bundles here:

Plug 'scrooloose/syntastic'
Plug 'justinmk/vim-sneak'
Plug 'Shougo/neocomplete'
Plug 'osyo-manga/vim-monster'
Plug 'kien/rainbow_parentheses.vim'
Plug 'rust-lang/rust.vim'
Plug 'guns/vim-clojure-static'                " better clojure integration
Plug 'pangloss/vim-javascript'        "Better js highlight
Plug 'mxw/vim-jsx'                    "Better jsx highlight
Plug 'slim-template/vim-slim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'kchmck/vim-coffee-script'
Plug 'nelstrom/vim-visual-star-search' "Use # and * in visual mode
Plug 'vim-ruby/vim-ruby'              "Latest version of ruby tools
Plug 'mileszs/ack.vim'
Plug 'rking/ag.vim'
Plug 'sjl/vitality.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'vim-scripts/Auto-Pairs'
Plug 'altercation/vim-colors-solarized'
Plug 'jonathanfilip/vim-lucius'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Olical/vim-enmasse'
Plug 'Keithbsmiley/rspec.vim'          " rspec syntax highlight and file identification
Plug 'airblade/vim-gitgutter'          " git changes on vim gutter
Plug 'tpope/vim-rails'                "Better Rails integration
Plug 'tpope/vim-classpath'                " better find and gf for jvm projects
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-obsession'             "session management
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-dispatch'              " make async on another pane
Plug 'tpope/vim-fugitive'              " git wrapper
Plug 'tpope/vim-haystack'             " better fuzzy search
Plug 'tpope/vim-salve'                " leiningen support for vim
Plug 'tpope/vim-fireplace'                " clojure repl for vim
Plug 'tpope/vim-rbenv'                " clojure repl for vim
Plug 'mustache/vim-mustache-handlebars'
Plug 'leafgarland/typescript-vim'      "typescript support 
Plug 'janko-m/vim-test'      
Plug 'editorconfig/editorconfig-vim'
Plug 'neomake/neomake' "async linting
Plug 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }

" Enable fzf
set rtp+=/usr/local/opt/fzf
Plug 'junegunn/fzf.vim'

" Initialize plugin system
call plug#end()

filetype plugin indent on

set nocompatible                  " Must come first because it changes other options.

syntax on                         " Turn on syntax highlighting.
set spell spelllang=en_us         " Turns on spellcheker
syntax spell toplevel             " check syntaxe correctly on latex files
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

set nofoldenable
set fdm=expr                      "Fold comments
set fde=getline(v:lnum)=~'^\\s#'?1:getline(prevnonblank(v:lnum))=~'^\\s#'?1:getline(nextnonblank(v:lnum))=~'^\\s*#'?1:0

set virtualedit=all             " because blocks rock

set cpoptions+=$                  " Visual help for change word cw

set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.

set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

let g:airline_powerline_fonts = 1 " automatically populate the g:airline_symbols

" Enable neocomplete
let g:neocomplete#enable_at_startup = 1

" Set async completion.
let g:monster#completion#rcodetools#backend = "async_rct_complete"

" With neocomplete.vim
let g:neocomplete#sources#omni#input_patterns = {
\   "ruby" : '[^. *\t]\.\w*\|\h\w*::',
\}

" Solarized stuff
if !has('gui_running')
    " Compatibility for Terminal
    let g:solarized_termtrans=1

    if (&t_Co >= 256 || $TERM == 'xterm-256color')
        " Do nothing, it handles itself.
    else
        " Make Solarized use 16 colors for Terminal support
        let g:solarized_termcolors=16
    endif
endif
set background=light
colorscheme solarized

" set auto read buffers
set autoread

" WARNING MIGHT BE CAUSING SOME SLOWNESS
" Diferentiate between INSERT and NORMAL mode with insert line
"set cursorline
"autocmd InsertEnter * set cursorline!
"autocmd InsertLeave * set cursorline

" Mappings custom
" tab for auto complete
"imap <Tab> <C-P>
" press jk in insert mode to enter command mode
imap jk <c-c>
" Autocomplete will pull from keywords in the current file, other buffers (closed or still
" open), and from the current tags file
set complete=.,b,u,]
" Closest to zsh completion
set wildmode=longest,list:longest

" progaming language number of tabs
autocmd Filetype r setlocal ts=2 sts=2 sw=2
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2

" Automatic fold settings for specific files. Uncomment to use.
autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2

" reduce esc  key lag
set timeoutlen=1000 ttimeoutlen=0

" Speed up screen drawing
" Syntax coloring lines that are too long just slows down the world
"set synmaxcol=128
set ttyfast " u got a fast terminal
set ttyscroll=3
set lazyredraw " to avoid scrolling problems

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
set wildignore+=vendor/rails/*,bin/*,node_modules/*,script/* " Rails

" Enable Hardtime
let g:hardtime_default_on = 1

" Auto remove trailing whitespace
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
autocmd FileType c,coffee,cpp,java,php,ruby,python autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
autocmd FileType ruby,coffee,slim autocmd BufWritePre <buffer> :retab

" VIM-Latex specific
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
"set wildignore+=*.log,*.aux,*.dvi,*.aut,*.aux,*.bbl,*.blg,*.dvi,*.fff,*.log,*.out,*.pdf,*.ps,*.toc,*.ttt,*.m*,*.lo*,*.eps,*.sty,*.backupn

" set default register to the clipboard
set clipboard=unnamed

" stop swap files
set nobackup
set nowritebackup
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""
""""""     Personal shortcuts       """""""
"""""""""""""""""""""""""""""""""""""""""""

""" Search and Replace
"""
" Replace current selected text, on current buffer
nnoremap <leader>sr :%s///g<left><left>


" rubocop auto correct buffer
nnoremap <leader>wb :w <cr> :let lineNumber = line('.') <cr> :%!rubocop -a -s  % <cr> /====================<cr> dgg <cr> :execute lineNumber <cr><cr> :w <cr>

"""
""" Spelling
"""
" Correct first spelling error to the left
" and go back where the cursor was
map <leader>za mz[s1z=`z
" same thing to the right
map <leader>zs mz]s1z=`z
" Go to next spelling mistake
map <leader>zc [s
" Go to previous spelling mistake
map <leader>zv ]s
" Toggle spelling
map <leader>zt :set spell!<cr>
" Apply first correction
map <leader>zz 1z=

let test#strategy = "dispatch"
nnoremap <Leader>sf  :w <bar> :TestFile<CR>
nnoremap <Leader>s.  :w <bar> :TestNearest<CR>
nnoremap <Leader>sd  :w <bar> :TestLast<CR>
nnoremap <Leader>sa  :w <bar> :TestSuite<CR>
nnoremap <Leader>sv  :w <bar> :TestVisit<CR>

"" vim.rails key maps
nnoremap <Leader>rm :Rmodel
nnoremap <Leader>rv :Rview
nnoremap <Leader>rc :Rcontroller
nnoremap <Leader>rh :Rhelper
nnoremap <Leader>rmi :Rmigration
nnoremap <Leader>rr :R<cr>
vnoremap <Leader>re :Rextract

set re=1 "set regex engine to older one, might speedup vim

"Insert mode shortcuts
inoremap II <Esc>I
inoremap AA <Esc>A
inoremap OO <Esc>O
inoremap CC <Esc>C
inoremap CW <Esc>bcw
inoremap Ee <Esc>ea
inoremap EE <Esc>Ea

""" File type specific
" Slim
" show tabs:
au  FileType slim set list

" syntastic config
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_typescript_checkers=['tslint','tsc']

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_ruby_checkers = ['mri']

" Airline config
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_section_b = ''
let g:airline_section_y = ''

" assync ctags
let g:easytags_async = 1

" project specific vimrc
if filereadable(glob(".vimrc.local"))
    source .vimrc.local
endif

" fast word search with ag
noremap ยง :Ag! -Q <C-r>=expand('<cword>')<CR>

" rails commands
noremap <leader>rc :Dispatch bin/rails c <CR>
noremap <leader>rdb :Dispatch bin/rails dbconsole <CR>

" editor config play nicely with fugitive 
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" create parent folder when saving a new file if they dont exist
function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" ----------------------------------------------------------------------------
" ?ii / ?ai | indent-object
" ?io       | strictly-indent-object
" ----------------------------------------------------------------------------
function! s:indent_len(str)
  return type(a:str) == 1 ? len(matchstr(a:str, '^\s*')) : 0
endfunction

function! s:indent_object(op, skip_blank, b, e, bd, ed)
  let i = min([s:indent_len(getline(a:b)), s:indent_len(getline(a:e))])
  let x = line('$')
  let d = [a:b, a:e]

  if i == 0 && empty(getline(a:b)) && empty(getline(a:e))
    let [b, e] = [a:b, a:e]
    while b > 0 && e <= line('$')
      let b -= 1
      let e += 1
      let i = min(filter(map([b, e], 's:indent_len(getline(v:val))'), 'v:val != 0'))
      if i > 0
        break
      endif
    endwhile
  endif

  for triple in [[0, 'd[o] > 1', -1], [1, 'd[o] < x', +1]]
    let [o, ev, df] = triple

    while eval(ev)
      let line = getline(d[o] + df)
      let idt = s:indent_len(line)

      if eval('idt '.a:op.' i') && (a:skip_blank || !empty(line)) || (a:skip_blank && empty(line))
        let d[o] += df
      else | break | end
    endwhile
  endfor
  execute printf('normal! %dGV%dG', max([1, d[0] + a:bd]), min([x, d[1] + a:ed]))
endfunction
xnoremap <silent> ii :<c-u>call <SID>indent_object('>=', 1, line("'<"), line("'>"), 0, 0)<cr>
onoremap <silent> ii :<c-u>call <SID>indent_object('>=', 1, line('.'), line('.'), 0, 0)<cr>
xnoremap <silent> ai :<c-u>call <SID>indent_object('>=', 1, line("'<"), line("'>"), -1, 1)<cr>
onoremap <silent> ai :<c-u>call <SID>indent_object('>=', 1, line('.'), line('.'), -1, 1)<cr>
xnoremap <silent> io :<c-u>call <SID>indent_object('==', 0, line("'<"), line("'>"), 0, 0)<cr>
onoremap <silent> io :<c-u>call <SID>indent_object('==', 0, line('.'), line('.'), 0, 0)<cr>

" Adds :Notes command
command Notes e ~/Desktop/notes.md

" run neomake on save
autocmd! BufWritePost * Neomake

" Reformat json file
nnoremap <leader>fj :%! json_reformat <cr>

" FZF shortcuts
nnoremap <space> :Files<cr>
nnoremap <leader>m :Tags<cr>
nnoremap <leader>n :BTags<cr>

"Ruby close end
if !exists( "*RubyEndToken" )

  function RubyEndToken()
    let current_line = getline( '.' )
    let braces_at_end = '{\s*\(|\(,\|\s\|\w\)*|\s*\)\?$'
    let stuff_without_do = '^\s*\(class\|if\|unless\|begin\|case\|for\|module\|while\|until\|def\)'
      let with_do = 'do\s*\(|\(,\|\s\|\w\)*|\s*\)\?$'

      if match(current_line, braces_at_end) >= 0
        return "\<CR>}\<C-O>O"
      elseif match(current_line, stuff_without_do) >= 0
        return "\<CR>end\<C-O>O"
      elseif match(current_line, with_do) >= 0
        return "\<CR>end\<C-O>O"
      else
        return "\<CR>"
      endif
    endfunction

endif

imap <buffer> <CR> <C-R>=RubyEndToken()<CR>
